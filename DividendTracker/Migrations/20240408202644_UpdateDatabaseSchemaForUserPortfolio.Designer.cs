// <auto-generated />
using DividendTracker.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DividendTracker.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240408202644_UpdateDatabaseSchemaForUserPortfolio")]
    partial class UpdateDatabaseSchemaForUserPortfolio
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DividendTracker.Models.Dividend", b =>
                {
                    b.Property<int>("DividendId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DividendId"));

                    b.Property<decimal>("CurrentStockPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DividendAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PayoutFrequency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DividendId");

                    b.HasIndex("Ticker")
                        .IsUnique();

                    b.ToTable("Dividends");

                    b.HasData(
                        new
                        {
                            DividendId = -1,
                            CurrentStockPrice = 124.95m,
                            DividendAmount = 0.13m,
                            PayoutFrequency = "Annually",
                            Ticker = "HEXA-B"
                        },
                        new
                        {
                            DividendId = -2,
                            CurrentStockPrice = 55.06m,
                            DividendAmount = 0.65m,
                            PayoutFrequency = "Annually",
                            Ticker = "NIBE-B"
                        },
                        new
                        {
                            DividendId = -3,
                            CurrentStockPrice = 125.76m,
                            DividendAmount = 0.92m,
                            PayoutFrequency = "Annually",
                            Ticker = "NDA-SE"
                        },
                        new
                        {
                            DividendId = -4,
                            CurrentStockPrice = 497.4m,
                            DividendAmount = 1.01m,
                            PayoutFrequency = "Annually",
                            Ticker = "ABB"
                        },
                        new
                        {
                            DividendId = -5,
                            CurrentStockPrice = 144.85m,
                            DividendAmount = 11.5m,
                            PayoutFrequency = "Annually",
                            Ticker = "SEB-A"
                        },
                        new
                        {
                            DividendId = -6,
                            CurrentStockPrice = 122.3m,
                            DividendAmount = 13m,
                            PayoutFrequency = "Annually",
                            Ticker = "SHB-A"
                        },
                        new
                        {
                            DividendId = -7,
                            CurrentStockPrice = 226.5m,
                            DividendAmount = 15.15m,
                            PayoutFrequency = "Annually",
                            Ticker = "SWED-A"
                        },
                        new
                        {
                            DividendId = -8,
                            CurrentStockPrice = 306.9m,
                            DividendAmount = 18m,
                            PayoutFrequency = "Annually",
                            Ticker = "VOLV-B"
                        },
                        new
                        {
                            DividendId = -9,
                            CurrentStockPrice = 25.69m,
                            DividendAmount = 2m,
                            PayoutFrequency = "Annually",
                            Ticker = "TELIA"
                        },
                        new
                        {
                            DividendId = -10,
                            CurrentStockPrice = 1358.6m,
                            DividendAmount = 2.65m,
                            PayoutFrequency = "Annually",
                            Ticker = "EVO"
                        },
                        new
                        {
                            DividendId = -11,
                            CurrentStockPrice = 1258.5m,
                            DividendAmount = 2.66m,
                            PayoutFrequency = "Annually",
                            Ticker = "ALIV-SDB"
                        },
                        new
                        {
                            DividendId = -12,
                            CurrentStockPrice = 57.02m,
                            DividendAmount = 2.7m,
                            PayoutFrequency = "Annually",
                            Ticker = "ERIC-B"
                        },
                        new
                        {
                            DividendId = -13,
                            CurrentStockPrice = 156.55m,
                            DividendAmount = 2.75m,
                            PayoutFrequency = "Annually",
                            Ticker = "SCA-B"
                        },
                        new
                        {
                            DividendId = -14,
                            CurrentStockPrice = 181.7m,
                            DividendAmount = 2.8m,
                            PayoutFrequency = "Annually",
                            Ticker = "ATCO-A"
                        },
                        new
                        {
                            DividendId = -15,
                            CurrentStockPrice = 160.75m,
                            DividendAmount = 2.8m,
                            PayoutFrequency = "Annually",
                            Ticker = "ATCO-B"
                        },
                        new
                        {
                            DividendId = -16,
                            CurrentStockPrice = 1369m,
                            DividendAmount = 2.9m,
                            PayoutFrequency = "Annually",
                            Ticker = "AZN"
                        },
                        new
                        {
                            DividendId = -17,
                            CurrentStockPrice = 206.4m,
                            DividendAmount = 4.4m,
                            PayoutFrequency = "Annually",
                            Ticker = "GETI-B"
                        },
                        new
                        {
                            DividendId = -18,
                            CurrentStockPrice = 263.8m,
                            DividendAmount = 4.8m,
                            PayoutFrequency = "Annually",
                            Ticker = "INVE-B"
                        },
                        new
                        {
                            DividendId = -19,
                            CurrentStockPrice = 309.4m,
                            DividendAmount = 5.4m,
                            PayoutFrequency = "Annually",
                            Ticker = "ASSA-B"
                        },
                        new
                        {
                            DividendId = -20,
                            CurrentStockPrice = 241m,
                            DividendAmount = 5.5m,
                            PayoutFrequency = "Annually",
                            Ticker = "SAND"
                        },
                        new
                        {
                            DividendId = -21,
                            CurrentStockPrice = 149.68m,
                            DividendAmount = 6.5m,
                            PayoutFrequency = "Annually",
                            Ticker = "HM-B"
                        },
                        new
                        {
                            DividendId = -22,
                            CurrentStockPrice = 86.44m,
                            DividendAmount = 6.9m,
                            PayoutFrequency = "Annually",
                            Ticker = "TEL2-B"
                        },
                        new
                        {
                            DividendId = -23,
                            CurrentStockPrice = 428m,
                            DividendAmount = 7.5m,
                            PayoutFrequency = "Annually",
                            Ticker = "ALFA"
                        },
                        new
                        {
                            DividendId = -24,
                            CurrentStockPrice = 228.1m,
                            DividendAmount = 7.5m,
                            PayoutFrequency = "Annually",
                            Ticker = "SKF-B"
                        },
                        new
                        {
                            DividendId = -25,
                            CurrentStockPrice = 285.3m,
                            DividendAmount = 7.5m,
                            PayoutFrequency = "Annually",
                            Ticker = "BOL"
                        },
                        new
                        {
                            DividendId = -26,
                            CurrentStockPrice = 239.6m,
                            DividendAmount = 7.75m,
                            PayoutFrequency = "Annually",
                            Ticker = "ESSITY-B"
                        });
                });

            modelBuilder.Entity("DividendTracker.Models.Stock", b =>
                {
                    b.Property<string>("Ticker")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sector")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Ticker");

                    b.ToTable("Stocks");

                    b.HasData(
                        new
                        {
                            Ticker = "HEXA-B",
                            CompanyName = "Hexagon",
                            Sector = "Utilities"
                        },
                        new
                        {
                            Ticker = "NIBE-B",
                            CompanyName = "NIBE Industrier",
                            Sector = "Utilities"
                        },
                        new
                        {
                            Ticker = "NDA-SE",
                            CompanyName = "Nordea Bank",
                            Sector = "Finance"
                        },
                        new
                        {
                            Ticker = "ABB",
                            CompanyName = "ABB",
                            Sector = "Industrial"
                        },
                        new
                        {
                            Ticker = "SEB-A",
                            CompanyName = "SEB A",
                            Sector = "Finance"
                        },
                        new
                        {
                            Ticker = "SHB-A",
                            CompanyName = "Handelsbanken A",
                            Sector = "Finance"
                        },
                        new
                        {
                            Ticker = "SWED-A",
                            CompanyName = "Swedbank",
                            Sector = "Finance"
                        },
                        new
                        {
                            Ticker = "VOLV-B",
                            CompanyName = "Volvo B",
                            Sector = "Industrial"
                        },
                        new
                        {
                            Ticker = "TELIA",
                            CompanyName = "Telia Company",
                            Sector = "Communication"
                        },
                        new
                        {
                            Ticker = "EVO",
                            CompanyName = "Evolution",
                            Sector = "Consumer goods"
                        },
                        new
                        {
                            Ticker = "ALIV-SDB",
                            CompanyName = "Autoliv",
                            Sector = "Industrial"
                        },
                        new
                        {
                            Ticker = "ERIC-B",
                            CompanyName = "Ericsson B",
                            Sector = "Communication"
                        },
                        new
                        {
                            Ticker = "SCA-B",
                            CompanyName = "SCA B",
                            Sector = "Raw Material"
                        },
                        new
                        {
                            Ticker = "ATCO-A",
                            CompanyName = "Atlas Copco A",
                            Sector = "Industrial"
                        },
                        new
                        {
                            Ticker = "ATCO-B",
                            CompanyName = "Atlas Copco B",
                            Sector = "Industrial"
                        },
                        new
                        {
                            Ticker = "AZN",
                            CompanyName = "AstraZeneca",
                            Sector = "Pharma"
                        },
                        new
                        {
                            Ticker = "GETI-B",
                            CompanyName = "Getinge",
                            Sector = "Pharma"
                        },
                        new
                        {
                            Ticker = "INVE-B",
                            CompanyName = "Investor B",
                            Sector = "Investment company"
                        },
                        new
                        {
                            Ticker = "ASSA-B",
                            CompanyName = "Assa Abloy",
                            Sector = "Real Estate"
                        },
                        new
                        {
                            Ticker = "SAND",
                            CompanyName = "Sandvik",
                            Sector = "Industrial"
                        },
                        new
                        {
                            Ticker = "HM-B",
                            CompanyName = "Hennes & Mauritz",
                            Sector = "Consumer goods"
                        },
                        new
                        {
                            Ticker = "TEL2-B",
                            CompanyName = "Tele2 B",
                            Sector = "Communication"
                        },
                        new
                        {
                            Ticker = "ALFA",
                            CompanyName = "Alfa Laval",
                            Sector = "Industrial"
                        },
                        new
                        {
                            Ticker = "SKF-B",
                            CompanyName = "SKF B",
                            Sector = "Industrial"
                        },
                        new
                        {
                            Ticker = "BOL",
                            CompanyName = "Boliden",
                            Sector = "Raw Material"
                        },
                        new
                        {
                            Ticker = "ESSITY-B",
                            CompanyName = "Essity B",
                            Sector = "Consumer goods"
                        });
                });

            modelBuilder.Entity("DividendTracker.Models.UserPortfolio", b =>
                {
                    b.Property<int>("UserPortfolioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserPortfolioId"));

                    b.Property<int>("AmountOfSharesOwned")
                        .HasColumnType("int");

                    b.Property<decimal>("AverageCostPerShare")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserPortfolioId");

                    b.HasIndex("Ticker");

                    b.ToTable("UserPortfolios");
                });

            modelBuilder.Entity("DividendTracker.Models.Dividend", b =>
                {
                    b.HasOne("DividendTracker.Models.Stock", "Stock")
                        .WithOne("Dividend")
                        .HasForeignKey("DividendTracker.Models.Dividend", "Ticker")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("DividendTracker.Models.UserPortfolio", b =>
                {
                    b.HasOne("DividendTracker.Models.Stock", "Stock")
                        .WithMany("UserPortfolios")
                        .HasForeignKey("Ticker")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("DividendTracker.Models.Stock", b =>
                {
                    b.Navigation("Dividend")
                        .IsRequired();

                    b.Navigation("UserPortfolios");
                });
#pragma warning restore 612, 618
        }
    }
}
